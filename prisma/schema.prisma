generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id            String    @id
  name          String    @db.Text
  email         String
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  role          Role      @default(user)
  sessions      Session[]
  accounts      Account[]

  recruiterProfile          Recruiter?
  recruitmentManagerProfile RecruitmentManager?
  accountExecutiveProfile   AccountExecutive?
  accountManagerProfile     AccountManager?

  @@unique([email])
  @@map("user")
}

// This is now the central profile for a recruiter's business data.
// It exists whether or not they have a login (User account).
model Recruiter {
  id    String @id @default(cuid())
  name  String
  email String @unique // The primary identifier from your CSVs

  has_reached_30k_deals_threshold Boolean @default(false)

  // OPTIONAL link to the User model for authentication.
  // This will be null until the recruiter signs up.
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  // Relations to other tables
  invoices         RecruiterInvoice[]
  collections      RecruiterCollection[]
  monthlySummaries RecruiterMonthlySummary[]
  payouts          RecruiterPayout[]
}

model RecruiterInvoice {
  id             String  @id @default(cuid())
  dealId         String  @unique
  dealLink       String?
  dealName       String
  amountInvoiced Float
  month          String

  recruiter      Recruiter @relation(fields: [recruiterEmail], references: [email])
  recruiterEmail String
}

model RecruiterCollection {
  id         String @id @default(cuid())
  amountPaid Float
  month      String
  dealId     String

  recruiter      Recruiter @relation(fields: [recruiterEmail], references: [email])
  recruiterEmail String
}

model RecruiterPayout {
  id                   String @id @default(cuid())
  amount               Float
  commissionRate       Float
  payoutMonth          String
  sourceSummaryMonth   String
  sourceRecruiterEmail String

  recruiter Recruiter @relation(fields: [sourceRecruiterEmail], references: [email])
}

model RecruiterMonthlySummary {
  id                  String @id @default(cuid())
  month               String
  totalDealsCompleted Float
  totalCashCollected  Float

  recruiter      Recruiter @relation(fields: [recruiterEmail], references: [email])
  recruiterEmail String

  @@unique([recruiterEmail, month])
}

model RecruitmentManager {
  id    String @id @default(cuid())
  name  String
  email String @unique

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  invoices         RecruitmentManagerInvoice[]
  collections      RecruitmentManagerCollection[]
  monthlySummaries RecruitmentManagerMonthlySummary[]
  payouts          RecruitmentManagerPayout[]
}

model RecruitmentManagerInvoice {
  id             String  @id @default(cuid())
  dealId         String  @unique
  dealLink       String?
  dealName       String
  amountInvoiced Float
  month          String

  manager      RecruitmentManager @relation(fields: [managerEmail], references: [email])
  managerEmail String
}

model RecruitmentManagerCollection {
  id         String @id @default(cuid())
  amountPaid Float
  month      String
  dealId     String

  manager      RecruitmentManager @relation(fields: [managerEmail], references: [email])
  managerEmail String
}

model RecruitmentManagerMonthlySummary {
  id               String @id @default(cuid())
  month            String
  totalInvoiced    Float
  totalCollections Float

  manager      RecruitmentManager @relation(fields: [managerEmail], references: [email])
  managerEmail String

  @@unique([managerEmail, month])
}

model RecruitmentManagerPayout {
  id                 String @id @default(cuid())
  amount             Float
  payoutMonth        String
  sourceSummaryMonth String
  sourceManagerEmail String

  manager RecruitmentManager @relation(fields: [sourceManagerEmail], references: [email])
}

model AccountExecutive {
  id    String @id @default(cuid())
  name  String
  email String @unique

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  baseCommissionRate          Float
  tier1CommissionRate         Float
  tier1CashCollectedThreshold Float
  tier2CommissionRate         Float
  tier2CashCollectedThreshold Float
  tier3CommissionRate         Float
  tier3CashCollectedThreshold Float
  tierSystemEnabled           Boolean

  invoices         AccountExecutiveInvoice[]
  collections      AccountExecutiveCollection[]
  monthlySummaries AccountExecutiveMonthlySummary[]
  payouts          AccountExecutivePayout[]
}

model AccountExecutiveInvoice {
  id             String  @id @default(cuid())
  dealId         String  @unique
  dealLink       String?
  dealName       String
  amountInvoiced Float
  month          String

  executive      AccountExecutive @relation(fields: [executiveEmail], references: [email])
  executiveEmail String
}

model AccountExecutiveCollection {
  id             String @id @default(cuid())
  amountPaid     Float
  month          String
  dealId         String
  commissionRate Float

  executive      AccountExecutive @relation(fields: [executiveEmail], references: [email])
  executiveEmail String
}

model AccountExecutiveMonthlySummary {
  id               String @id @default(cuid())
  month            String
  totalInvoiced    Float
  totalCollections Float
  commissionRate   Float // Storing the rate for the month simplifies payout calculation

  executive      AccountExecutive @relation(fields: [executiveEmail], references: [email])
  executiveEmail String

  @@unique([executiveEmail, month])
}

model AccountExecutivePayout {
  id                   String @id @default(cuid())
  amount               Float
  commissionRate       Float
  payoutMonth          String
  sourceSummaryMonth   String
  sourceExecutiveEmail String

  executive AccountExecutive @relation(fields: [sourceExecutiveEmail], references: [email])
}

model AccountManager {
  id    String @id @default(cuid())
  name  String
  email String @unique

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  isAmerican             Boolean
  americanCommissionRate Float
  tier1CommissionRate    Float
  tier1Threshold         Float
  tier2CommissionRate    Float
  tier2Threshold         Float
  tier3CommissionRate    Float
  tier3Threshold         Float

  // invoices         AccountManagerInvoice[]
  // collections      AccountManagerCollection[]
  // monthlySummaries AccountManagerMonthlySummary[]
  // payouts          AccountManagerPayout[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
